{"version":3,"sources":["Game.js","Board.js","Square.js","serviceWorker.js","index.js"],"names":["calculateWinner","squares","lines","i","length","a","b","c","global","winArray","console","log","Game","clickcounter","state","history","Array","fill","stepNumber","xIsNext","textboxStatus","PlayerX","PlayerO","handlePlayers","bind","handleChangeX","handleChangeO","handleSubmit","event","preventDefault","this","setState","target","value","slice","concat","step","status","current","winner","moves","map","move","desc","key","className","onClick","jumpTo","type","placeholder","onChange","handleClick","React","Component","Board","props","squareStyle","renderSquare","class","Square","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.463add29.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Board from './Board.js'\n\n\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      global.winArray=[a,b,c]\n      console.log(global.winArray)\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n\nclass Game extends React.Component {\n  constructor(){\n    super()\n    global.winArray =[]\n    global.clickcounter=0\n    this.state={\n      history:[{\n        squares:Array(9).fill(null),\n      }],\n      stepNumber:0,\n      xIsNext:true,\n      textboxStatus:\"noDisplay\",\n      PlayerX: \"\", \n      PlayerO:\"\"  \n    };\n    this.handlePlayers=this.handlePlayers.bind(this)\n    this.handleChangeX= this.handleChangeX.bind(this)\n    this.handleChangeO= this.handleChangeO.bind(this)\n    this.handleSubmit=this.handleSubmit.bind(this)\n  }\n\n\n\nhandlePlayers(event){\n  event.preventDefault();\n  this.setState({textboxStatus: \"formStyle\",})\n}\n\nhandleChangeX(event){\n  event.preventDefault();\n  this.setState({ PlayerX: event.target.value,\n                  \n\n              })\n}\n\n\nhandleChangeO(event){\n  event.preventDefault();\n  this.setState({ \n                  PlayerO: event.target.value,\n\n              })\n}\n\nhandleSubmit(event){\nevent.preventDefault();\n    this.setState({textboxStatus: \"noDisplay\", })\n\n}\n\n\nhandleClick(i){\n  const history = this.state.history.slice(0, this.state.stepNumber + 1);\n  const current = history[history.length-1];\n  const squares = current.squares.slice();\n  if(calculateWinner (squares) || squares[i]){\n    return;\n  }\n\n\n  squares[i]= this.state.xIsNext?\"X\":\"O\"\n  this.setState({\n    history: history.concat([{\n      squares:squares\n    }]),\n    stepNumber: history.length,\n    xIsNext: !this.state.xIsNext,\n\n  });\n}\n\n\njumpTo(step){\n  global.winArray=[]\n  \n  this.setState({\n    stepNumber:step,\n    xIsNext:(step % 2) ===0,    \n  });\n}\n\n\n\n  render() {\n   \n    const history = this.state.history\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move)=> {\n      const desc = move ?\n      'Go to Move #' + move:\n      'Go to game start';\n      global.clickcounter =move\n      return(\n        <li key={move}>\n          <button className=\"buttonStyle\" onClick={()=> this.jumpTo(move)}>{desc}</button>\n        </li>\n\n\n        )\n    })\n\n    let status;\n    if(winner){\n      status = 'Winner:' + winner +\" \"+(winner==='X'?this.state.PlayerX:this.state.PlayerO);\n    } else{\n      status = 'Next player: ' + (this.state.xIsNext ? 'X '+ this.state.PlayerX : '0 '+this.state.PlayerO);\n    }\n    if (!winner && global.clickcounter===9){status=\"It is a Draw\"}\n\n\n\n\n    return (\n      <div className=\"game\">\n      <form className={this.state.textboxStatus}>\n            <input type =\"text\"  placeholder =\"Name of Player X\"value={this.state.PlayerX} onChange={this.handleChangeX}/><br/>\n            <input type =\"text\"  placeholder=\"Name of Player O\" value={this.state.PlayerO} onChange={this.handleChangeO}/><br/>\n            <button className=\"formButton\" onClick={this.handleSubmit}> OK </button>\n           \n                    \n      </form>\n      <button className=\"btn\" onClick={this.handlePlayers}>{this.state.PlayerX} X vs {this.state.PlayerO} O</button>\n       <div>{status}</div>\n        <div className=\"game-board\">\n          <Board\n            squares = {current.squares}\n            onClick ={(i)=> this.handleClick(i)}\n           />\n\n        </div>\n        <div className=\"game-info\">\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default Game;\n","import React from 'react';\nimport './App.css';\nimport Square from './Square'\n\n\n\n\nclass Board extends React.Component {\n\n\n\n\n  renderSquare(i) {\n    \n    return <Square \n            value={this.props.squares[i]}\n            squareStyle={\n            (i===global.winArray[0]||i===global.winArray[1]||i===global.winArray[2])?\"squareWin\":\"square\"}\n            onClick={()=>this.props.onClick(i)}\n    />;\n  }\n\n  render() {\n\n    return (\n      <div>\n      <div>\n        <div className=\"board-row1\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row2\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row3\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n      <div class=\"endgame\">text</div>\n      </div>\n\n    );\n  }\n}\n\nexport default Board","import React from 'react';\nimport './App.css';\n\n\nfunction Square(props){\n\n  \n    return (\n      <button className={props.squareStyle} onClick={props.onClick}>\n        {props.value}\n      </button>\n    );\n  }\n\n\nexport default Square","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
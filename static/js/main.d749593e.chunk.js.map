{"version":3,"sources":["Game.js","Board.js","Square.js","serviceWorker.js","index.js"],"names":["calculateWinner","squares","lines","i","length","a","b","c","global","winArray","console","log","Game","handlePlayers","event","preventDefault","setState","textboxStatus","handleChangeX","PlayerX","target","value","handleChangeO","PlayerO","handleSubmit","clickcounter","state","history","Array","fill","stepNumber","xIsNext","this","slice","concat","step","status","current","winner","moves","map","move","desc","key","className","onClick","jumpTo","type","placeholder","onChange","handleClick","React","Component","Board","props","squareStyle","renderSquare","class","Square","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d749593e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Board from './Board.js';\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      global.winArray = [a, b, c];\n      console.log(global.winArray);\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    global.winArray = [];\n    global.clickcounter = 0;\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      textboxStatus: 'noDisplay',\n      PlayerX: '',\n      PlayerO: ''\n    };\n  }\n\n  handlePlayers = event => {\n    event.preventDefault();\n    this.setState({ textboxStatus: 'formStyle' });\n  };\n\n  handleChangeX = event => {\n    event.preventDefault();\n    this.setState({ PlayerX: event.target.value });\n  };\n\n  handleChangeO = event => {\n    event.preventDefault();\n    this.setState({\n      PlayerO: event.target.value\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.setState({ textboxStatus: 'noDisplay' });\n  };\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares\n        }\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    global.winArray = [];\n\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to Move #' + move : 'Go to game start';\n      global.clickcounter = move;\n      return (\n        <li key={move}>\n          <button\n            className={\n              this.state.stepNumber === move ? 'buttonStyle' : 'noButtonStyle'\n            }\n            onClick={() => this.jumpTo(move)}>\n            {desc}\n          </button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status =\n        'Winner:' +\n        winner +\n        ' ' +\n        (winner === 'X' ? this.state.PlayerX : this.state.PlayerO);\n    } else {\n      status =\n        'Next player: ' +\n        (this.state.xIsNext\n          ? 'X ' + this.state.PlayerX\n          : '0 ' + this.state.PlayerO);\n    }\n    if (!winner && global.clickcounter === 9) {\n      status = 'It is a Draw';\n    }\n\n    return (\n      <div className='game'>\n        <form className={this.state.textboxStatus}>\n          <input\n            type='text'\n            placeholder='Name of Player X'\n            value={this.state.PlayerX}\n            onChange={this.handleChangeX}\n          />\n          <br />\n          <input\n            type='text'\n            placeholder='Name of Player O'\n            value={this.state.PlayerO}\n            onChange={this.handleChangeO}\n          />\n          <br />\n          <button className='formButton' onClick={this.handleSubmit}>\n            {' '}\n            OK{' '}\n          </button>\n        </form>\n        <button className='btn' onClick={this.handlePlayers}>\n          {this.state.PlayerX} X vs {this.state.PlayerO} O\n        </button>\n        <div>{status}</div>\n        <div className='game-board'>\n          <Board squares={current.squares} onClick={i => this.handleClick(i)} />\n        </div>\n        <div className='game-info'>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport './App.css';\nimport Square from './Square';\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        squareStyle={\n          i === global.winArray[0] ||\n          i === global.winArray[1] ||\n          i === global.winArray[2]\n            ? 'squareWin'\n            : 'square'\n        }\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <div className='board-row1'>\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n          </div>\n          <div className='board-row2'>\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n          </div>\n          <div className='board-row3'>\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n          </div>\n        </div>\n        <div class='endgame'>text</div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from 'react';\nimport './App.css';\n\n\nfunction Square(props){\n\n  \n    return (\n      <button className={props.squareStyle} onClick={props.onClick}>\n        {props.value}\n      </button>\n    );\n  }\n\n\nexport default Square","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}